apiVersion: v1
data:
  INIT_DB_SQL.sh: |-
    #!/bin/bash
    psql -d "$1" <<__SQL__
    CREATE TABLE AUDIT (ID VARCHAR(40) NOT NULL, USERNAME VARCHAR(255), USERAGENT VARCHAR(255), NAMESPACE VARCHAR(255), APIGROUP VARCHAR(255), APIVERSION VARCHAR(32), RESOURCE VARCHAR(64), NAME VARCHAR(255), STAGE VARCHAR(32), STAGETIMESTAMP TIMESTAMP NOT NULL, VERB VARCHAR(32), CODE INT, STATUS VARCHAR(255), REASON VARCHAR(255), MESSAGE VARCHAR(255));
    SELECT create_hypertable('audit', 'stagetimestamp', chunk_time_interval => INTERVAL '7days', if_not_exists => TRUE);
    SELECT add_retention_policy('audit', INTERVAL '1years', if_not_exists => TRUE);
    SELECT alter_job(1000, schedule_interval => INTERVAL '1 hours');


    CREATE TABLE CLUSTER_MEMBER (ID SERIAL, NAMESPACE VARCHAR(255) NOT NULL, CLUSTER VARCHAR(255) NOT NULL, MEMBER_ID VARCHAR(255) NOT NULL, MEMBER_NAME VARCHAR(255), ATTRIBUTE VARCHAR(255), ROLE VARCHAR(255), STATUS VARCHAR(255), CREATEDTIME TIMESTAMP NOT NULL DEFAULT NOW(), UPDATEDTIME TIMESTAMP NOT NULL DEFAULT NOW());
    CREATE OR REPLACE PROCEDURE DELETE_PENDING_MEMBER(job_id int, config jsonb) LANGUAGE PLPGSQL AS \$$ BEGIN DELETE FROM cluster_member WHERE STATUS = 'pending' and createdtime < now() - interval '1 days'; END\$$;
    SELECT add_job('DELETE_PENDING_MEMBER','1 hours');
    ALTER TABLE CLUSTER_MEMBER ADD CONSTRAINT MEMBER_CONSTRAINT UNIQUE (NAMESPACE, CLUSTER, MEMBER_ID, ATTRIBUTE);
    CREATE UNIQUE INDEX CLUSTER_STATUS ON CLUSTER_MEMBER (NAMESPACE, CLUSTER, STATUS) WHERE ( STATUS = 'owner');


    CREATE TABLE METERING (ID VARCHAR(64) NOT NULL,NAMESPACE VARCHAR(255) NOT NULL,CPU DOUBLE PRECISION,MEMORY BIGINT,STORAGE BIGINT,GPU DOUBLE PRECISION,PUBLIC_IP INT,PRIVATE_IP INT, TRAFFIC_IN BIGINT, TRAFFIC_OUT BIGINT, METERING_TIME TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,STATUS VARCHAR(255));
    ALTER TABLE METERING ADD CONSTRAINT UNIQUE_METERING UNIQUE (NAMESPACE, METERING_TIME);
    CREATE TABLE METERING_HOUR (ID VARCHAR(64) NOT NULL,NAMESPACE VARCHAR(255) NOT NULL,CPU DOUBLE PRECISION,MEMORY BIGINT,STORAGE BIGINT,GPU DOUBLE PRECISION,PUBLIC_IP INT,PRIVATE_IP INT, TRAFFIC_IN BIGINT, TRAFFIC_OUT BIGINT, METERING_TIME TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,STATUS VARCHAR(255));
    ALTER TABLE METERING_HOUR ADD CONSTRAINT UNIQUE_METERING_HOUR UNIQUE (NAMESPACE, METERING_TIME);
    CREATE TABLE METERING_DAY (ID VARCHAR(64) NOT NULL,NAMESPACE VARCHAR(255) NOT NULL,CPU DOUBLE PRECISION,MEMORY BIGINT,STORAGE BIGINT,GPU DOUBLE PRECISION,PUBLIC_IP INT,PRIVATE_IP INT, TRAFFIC_IN BIGINT, TRAFFIC_OUT BIGINT, METERING_TIME TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,STATUS VARCHAR(255));
    ALTER TABLE METERING_DAY ADD CONSTRAINT UNIQUE_METERING_DAY UNIQUE (NAMESPACE, METERING_TIME);
    CREATE TABLE METERING_MONTH (ID VARCHAR(64) NOT NULL,NAMESPACE VARCHAR(255) NOT NULL,CPU DOUBLE PRECISION,MEMORY BIGINT,STORAGE BIGINT,GPU DOUBLE PRECISION,PUBLIC_IP INT,PRIVATE_IP INT, TRAFFIC_IN BIGINT, TRAFFIC_OUT BIGINT, METERING_TIME TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,STATUS VARCHAR(255));
    ALTER TABLE METERING_MONTH ADD CONSTRAINT UNIQUE_METERING_MONTH UNIQUE (NAMESPACE, METERING_TIME);
    CREATE TABLE METERING_YEAR (ID VARCHAR(64) NOT NULL,NAMESPACE VARCHAR(255) NOT NULL,CPU DOUBLE PRECISION,MEMORY BIGINT,STORAGE BIGINT,GPU DOUBLE PRECISION,PUBLIC_IP INT,PRIVATE_IP INT, TRAFFIC_IN BIGINT, TRAFFIC_OUT BIGINT, METERING_TIME TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,STATUS VARCHAR(255));
    ALTER TABLE METERING_YEAR ADD CONSTRAINT UNIQUE_METERING_YEAR UNIQUE (NAMESPACE, METERING_TIME);
    
    SELECT create_hypertable('metering_hour', 'metering_time', chunk_time_interval => INTERVAL '1days', if_not_exists => TRUE);
    SELECT add_retention_policy('metering_hour', INTERVAL '1months', if_not_exists => TRUE);
    SELECT create_hypertable('metering_day', 'metering_time', chunk_time_interval => INTERVAL '1months', if_not_exists => TRUE);
    SELECT add_retention_policy('metering_day', INTERVAL '1years', if_not_exists => TRUE);
    SELECT create_hypertable('metering_month', 'metering_time', chunk_time_interval => INTERVAL '1years', if_not_exists => TRUE);
    SELECT add_retention_policy('metering_month', INTERVAL '1years', if_not_exists => TRUE);
    SELECT create_hypertable('metering_year', 'metering_time', chunk_time_interval => INTERVAL '1years', if_not_exists => TRUE);
    SELECT add_retention_policy('metering_year', INTERVAL '10years', if_not_exists => TRUE);

    CREATE TABLE EVENT (NAMESPACE VARCHAR(128) , KIND VARCHAR(32) NOT NULL, NAME VARCHAR(128) NOT NULL, UID VARCHAR(64) NOT NULL, APIVERSION VARCHAR(64), FIELDPATH VARCHAR(64), ACTION VARCHAR(128), REASON VARCHAR(128), NOTE VARCHAR(512), REPORTING_CONTROLLER VARCHAR(128), REPORTING_INSTANCE VARCHAR(128), HOST VARCHAR(16), COUNT INT, TYPE VARCHAR(32), FIRST_TIMESTAMP TIMESTAMP, LAST_TIMESTAMP TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP);
    SELECT create_hypertable('event', 'last_timestamp', chunk_time_interval => INTERVAL '1days', if_not_exists => TRUE, migrate_data => TRUE);
    SELECT add_retention_policy('event', INTERVAL '1months', if_not_exists => TRUE);
    
    CREATE EXTENSION pg_cron;
    SELECT cron.schedule('* * * * *', \$\$DELETE FROM CLUSTER_MEMBER WHERE STATUS = 'pending' AND CREATEDTIME < now() - interval '7days'\$\$);
    CREATE OR REPLACE FUNCTION UPDATE_TIME() RETURNS TRIGGER AS \$\$ BEGIN NEW.updatedtime = NOW(); RETURN NEW; END; \$\$ LANGUAGE plpgsql;
    CREATE TRIGGER TRIGGER_UPDATE_TIME AFTER UPDATE ON CLUSTER_MEMBER FOR EACH ROW EXECUTE PROCEDURE UPDATE_TIME();
    ALTER SYSTEM SET log_min_messages = {TIMESCALEDB_LOG_LEVEL};
    __SQL__
kind: ConfigMap
metadata:
  name: custom-init-scripts
  namespace: hypercloud5-system

---

apiVersion: v1
data:
  patroni.yaml: |
    bootstrap:
      dcs:
        loop_wait: 10
        maximum_lag_on_failover: 33554432
        postgresql:
          parameters:
            archive_command: /etc/timescaledb/scripts/pgbackrest_archive.sh %p
            archive_mode: "on"
            archive_timeout: 1800s
            autovacuum_analyze_scale_factor: 0.02
            autovacuum_max_workers: 10
            autovacuum_naptime: 5s
            autovacuum_vacuum_cost_limit: 500
            autovacuum_vacuum_scale_factor: 0.05
            cron.database_name: postgres
            hot_standby: "on"
            listen_addresses: '*'
            log_autovacuum_min_duration: 1min
            log_checkpoints: "on"
            log_connections: "on"
            log_disconnections: "on"
            log_line_prefix: '%t [%p]: [%c-%l] %u@%d,app=%a [%e] '
            log_lock_waits: "on"
            log_min_duration_statement: 1s
            log_statement: ddl
            max_connections: 100
            max_prepared_transactions: 150
            shared_preload_libraries: timescaledb,pg_stat_statements,pg_cron
            ssl: "off"
            tcp_keepalives_idle: 900
            tcp_keepalives_interval: 100
            temp_file_limit: 1GB
            timescaledb.passfile: ../.pgpass
            unix_socket_directories: /var/run/postgresql
            unix_socket_permissions: "0750"
            wal_level: hot_standby
            wal_log_hints: "on"
          use_pg_rewind: true
          use_slots: true
        retry_timeout: 10
        ttl: 30
      method: restore_or_initdb
      post_init: /etc/timescaledb/scripts/post_init.sh
      restore_or_initdb:
        command: |
          /etc/timescaledb/scripts/restore_or_initdb.sh --encoding=UTF8 --locale=C.UTF-8
        keep_existing_recovery_conf: true
    kubernetes:
      role_label: role
      scope_label: cluster-name
      use_endpoints: true
    log:
      level: WARNING
    postgresql:
      authentication:
        replication:
          username: standby
        superuser:
          username: postgres
      basebackup:
      - waldir: /var/lib/postgresql/wal/pg_wal
      callbacks:
        on_reload: /etc/timescaledb/scripts/patroni_callback.sh
        on_restart: /etc/timescaledb/scripts/patroni_callback.sh
        on_role_change: /etc/timescaledb/scripts/patroni_callback.sh
        on_start: /etc/timescaledb/scripts/patroni_callback.sh
        on_stop: /etc/timescaledb/scripts/patroni_callback.sh
      create_replica_methods:
      - pgbackrest
      - basebackup
      listen: 0.0.0.0:5432
      pg_hba:
      - local     all             postgres                              peer
      - local     all             all                                   md5
      - hostssl   all             all                127.0.0.1/32       md5
      - hostssl   all             all                ::1/128            md5
      - hostssl   replication     standby            all                md5
      - hostssl   all             all                all                md5
      - host      all             all                0.0.0.0/0          md5
      pgbackrest:
        command: /etc/timescaledb/scripts/pgbackrest_restore.sh
        keep_data: true
        no_master: true
        no_params: true
      recovery_conf:
        restore_command: /etc/timescaledb/scripts/pgbackrest_archive_get.sh %f "%p"
      use_unix_socket: true
    restapi:
      listen: 0.0.0.0:8008
kind: ConfigMap
metadata:
  labels:
    app: timescaledb
    cluster-name: timescaledb
    release: timescaledb
  name: timescaledb-patroni
  namespace: hypercloud5-system

---

apiVersion: v1
data:
  pgbackrest.conf: |
    [global]
    compress-level=3
    compress-type=lz4
    process-max=4
    repo1-cipher-type=none
    repo1-path=/hypercloud5-system/timescaledb/
    repo1-retention-diff=2
    repo1-retention-full=2
    repo1-s3-endpoint=s3.amazonaws.com
    repo1-s3-region=us-east-2
    repo1-type=s3
    spool-path=/var/run/postgresql
    start-fast=y

    [poddb]
    pg1-port=5432
    pg1-host-user=postgres
    pg1-path=/var/lib/postgresql/data
    pg1-socket-path=/var/run/postgresql

    link-all=y

    [global:archive-push]

    [global:archive-get]
kind: ConfigMap
metadata:
  labels:
    app: timescaledb
    release: timescaledb
  name: timescaledb-pgbackrest
  namespace: hypercloud5-system

---

apiVersion: v1
data:
  lifecycle_preStop.psql: |
    \pset pager off
    \set ON_ERROR_STOP true
    \set hostname `hostname`
    \set dsn_fmt 'user=postgres host=%s application_name=lifecycle:preStop@%s connect_timeout=5 options=''-c log_min_duration_statement=0'''

    SELECT
        pg_is_in_recovery() AS in_recovery,
        format(:'dsn_fmt', patroni_scope,                       :'hostname') AS primary_dsn,
        format(:'dsn_fmt', '/var/run/postgresql', :'hostname') AS local_dsn
    FROM
        current_setting('cluster_name') AS cs(patroni_scope)
    \gset

    \timing on
    \set ECHO queries

    -- There should be a CHECKPOINT at the primary
    \if :in_recovery
        \connect :"primary_dsn"
        CHECKPOINT;
    \endif

    -- There should also be a CHECKPOINT locally,
    -- for the primary, this may mean we do a double checkpoint,
    -- but the second one would be cheap anyway, so we leave that as is
    \connect :"local_dsn"
    SELECT 'Issuing checkpoint';
    CHECKPOINT;

    \if :in_recovery
        SELECT 'We are a replica: Successfully invoked checkpoints at the primary and locally.';
    \else
        SELECT 'We are a primary: Successfully invoked checkpoints, now issuing a switchover.';
        \! curl -s http://localhost:8008/switchover -XPOST -d '{"leader": "$(hostname)"}'
    \endif
  patroni_callback.sh: |
    #!/bin/sh
    set -e

    . "${HOME}/.pod_environment"

    for suffix in "$1" all
    do
      CALLBACK="/etc/timescaledb/callbacks/${suffix}"
      if [ -f "${CALLBACK}" ]
      then
        "${CALLBACK}" "$@"
      fi
    done
  pgbackrest_archive.sh: |
    #!/bin/sh

    log() {
        echo "$(date '+%Y-%m-%d %H:%M:%S') - archive - $1"
    }

    [ -z "$1" ] && log "Usage: $0 <WALFILE or DIRECTORY>" && exit 1

    PGBACKREST_BACKUP_ENABLED=0
    [ ${PGBACKREST_BACKUP_ENABLED} -ne 0 ] || exit 0

    . "${HOME}/.pgbackrest_environment"
    exec pgbackrest --stanza=poddb archive-push "$@"
  pgbackrest_archive_get.sh: |
    #!/bin/sh
    PGBACKREST_BACKUP_ENABLED=0
    [ ${PGBACKREST_BACKUP_ENABLED} -ne 0 ] || exit 0

    . "${HOME}/.pgbackrest_environment"
    exec pgbackrest --stanza=poddb archive-get "${1}" "${2}"
  pgbackrest_bootstrap.sh: |
    #!/bin/sh
    set -e

    log() {
        echo "$(date '+%Y-%m-%d %H:%M:%S') - bootstrap - $1"
    }

    terminate() {
        log "Stopping"
        exit 1
    }
    # If we don't catch these signals, and we're still waiting for PostgreSQL
    # to be ready, we will not respond at all to a regular shutdown request,
    # therefore, we explicitly terminate if we receive these signals.
    trap terminate TERM QUIT

    while ! pg_isready -q; do
        log "Waiting for PostgreSQL to become available"
        sleep 3
    done

    # We'll be lazy; we wait for another while to allow the database to promote
    # to primary if it's the only one running
    sleep 10

    # If we are the primary, we want to create/validate the backup stanza
    if [ "$(psql -c "SELECT pg_is_in_recovery()::text" -AtXq)" = "false" ]; then
        pgbackrest check || {
            log "Creating pgBackrest stanza"
            pgbackrest --stanza=poddb stanza-create --log-level-stderr=info || exit 1
            log "Creating initial backup"
            pgbackrest --type=full backup || exit 1
        }
    fi

    log "Starting pgBackrest api to listen for backup requests"
    exec python3 /scripts/pgbackrest-rest.py --stanza=poddb --loglevel=debug
  pgbackrest_restore.sh: |
    #!/bin/sh
    PGBACKREST_BACKUP_ENABLED=0
    [ ${PGBACKREST_BACKUP_ENABLED} -ne 0 ] || exit 1

    . "${HOME}/.pod_environment"

    PGDATA="/var/lib/postgresql/data"
    WALDIR="/var/lib/postgresql/wal/pg_wal"

    # A missing PGDATA points to Patroni removing a botched PGDATA, or manual
    # intervention. In this scenario, we need to recreate the DATA and WALDIRs
    # to keep pgBackRest happy
    [ -d "${PGDATA}" ] || install -o postgres -g postgres -d -m 0700 "${PGDATA}"
    [ -d "${WALDIR}" ] || install -o postgres -g postgres -d -m 0700 "${WALDIR}"

    exec pgbackrest --force --delta --log-level-console=detail restore
  post_init.sh: |
    #!/bin/sh
    . "${HOME}/.pod_environment"

    log() {
        echo "$(date '+%Y-%m-%d %H:%M:%S') - post_init - $1"
    }

    log "Creating extension TimescaleDB in template1 and postgres databases"
    psql -d "$URL" <<__SQL__
      \connect template1
      -- As we're still only initializing, we cannot have synchronous_commit enabled just yet.
      SET synchronous_commit to 'off';
      CREATE EXTENSION timescaledb;

      \connect postgres
      SET synchronous_commit to 'off';
      CREATE EXTENSION timescaledb;
    __SQL__

    TABLESPACES=""
    for tablespace in $TABLESPACES
    do
      log "Creating tablespace ${tablespace}"
      tablespacedir="/var/lib/postgresql/tablespaces/${tablespace}/data"
      psql -d "$URL" --set tablespace="${tablespace}" --set directory="${tablespacedir}" --set ON_ERROR_STOP=1 <<__SQL__
        SET synchronous_commit to 'off';
        CREATE TABLESPACE :"tablespace" LOCATION :'directory';
    __SQL__
    done

    # This directory may contain user defined post init steps
    for file in /etc/timescaledb/post_init.d/*
    do
      [ -d "$file" ] && continue
      [ ! -r "$file" ] && continue

      case "$file" in
        *.sh)
          if [ -x "$file" ]; then
            log "Call post init script [ $file ]"
            "$file" "$@"
            EXITCODE=$?
          else
            log "Source post init script [ $file ]"
            . "$file"
            EXITCODE=$?
          fi
          ;;
        *.sql)
          log "Apply post init sql [ $file ]"
          # Disable synchronous_commit since we're initializing
          PGOPTIONS="-c synchronous_commit=local" psql -d "$URL" -f "$file"
          EXITCODE=$?
          ;;
        *.sql.gz)
          log "Decompress and apply post init sql [ $file ]"
          gunzip -c "$file" | PGOPTIONS="-c synchronous_commit=local" psql -d "$URL"
          EXITCODE=$?
          ;;
        *)
          log "Ignore unknown post init file type [ $file ]"
          EXITCODE=0
          ;;
      esac
        EXITCODE=$?
        if [ "$EXITCODE" != "0" ]
        then
            log "ERROR: post init script $file exited with exitcode $EXITCODE"
            exit $EXITCODE
        fi
    done

    # We exit 0 this script, otherwise the database initialization fails.
    exit 0
  restore_or_initdb.sh: |
    #!/bin/sh

    . "${HOME}/.pod_environment"

    log() {
        echo "$(date '+%Y-%m-%d %H:%M:%S') - restore_or_initdb - $1"
    }

    PGDATA="/var/lib/postgresql/data"
    WALDIR="/var/lib/postgresql/wal/pg_wal"
    # A missing PGDATA points to Patroni removing a botched PGDATA, or manual
    # intervention. In this scenario, we need to recreate the DATA and WALDIRs
    # to keep pgBackRest happy
    [ -d "${PGDATA}" ] || install -o postgres -g postgres -d -m 0700 "${PGDATA}"
    [ -d "${WALDIR}" ] || install -o postgres -g postgres -d -m 0700 "${WALDIR}"

    if [ "${BOOTSTRAP_FROM_BACKUP}" = "1" ]; then
        log "Attempting restore from backup"
        # we want to override the environment with the environment
        # shellcheck disable=SC2046
        export $(env -i envdir /etc/pgbackrest/bootstrap env) > /dev/null
        export PGBACKREST_REPO1_PATH=

        if [ -z "${PGBACKREST_REPO1_PATH}" ]; then
            log "Unconfigured repository path"
            cat << "__EOT__"

    TimescaleDB Single Helm Chart error:

    You should configure the bootstrapFromBackup in your Helm Chart section by explicitly setting
    the repo1-path to point to the backups.

    For example, if you want to do a disaster recovery, and you want to reuse
    the backup, you could configure the path as follows:

    ```yaml
    bootstrapFromBackup:
      enabled: true
      repo1-path: "/hypercloud5-system/timescaledb/"
    ```

    For more information, consult the admin guide:
    https://github.com/timescale/timescaledb-kubernetes/blob/master/charts/timescaledb-single/admin-guide.md#bootstrap-from-backup


    __EOT__

            exit 1
        fi

        log "Listing available backup information"
        pgbackrest info
        EXITCODE=$?
        if [ ${EXITCODE} -ne 0 ]; then
            exit $EXITCODE
        fi

        pgbackrest --log-level-console=detail restore
        EXITCODE=$?
        if [ ${EXITCODE} -eq 0 ]; then
            log "pgBackRest restore finished succesfully, starting instance in recovery"
            # We want to ensure we do not overwrite a current backup repository with archives, therefore
            # we block archiving from succeeding until Patroni can takeover
            touch "${PGDATA}/recovery.signal"
            pg_ctl -D "${PGDATA}" start -o '--archive-command=/bin/false'

            while ! pg_isready -q; do
                log "Waiting for PostgreSQL to become available"
                sleep 3
            done

            # It is not trivial to figure out to what point we should restore, pgBackRest
            # should be fetching WAL segments until the WAL is exhausted. We'll ask pgBackRest
            # what the Maximum Wal is that it currently has; as soon as we see that, we can consider
            # the restore to be done
            while true; do
              MAX_BACKUP_WAL="$(pgbackrest info --output=json | python3 -c "import json,sys;obj=json.load(sys.stdin); print(obj[0]['archive'][0]['max']);")"
              log "Testing whether WAL file ${MAX_BACKUP_WAL} has been restored ..."
              [ -f "${PGDATA}/pg_wal/${MAX_BACKUP_WAL}" ] && break
              sleep 30;
            done

            # At this point we know the final WAL archive has been restored, we should be done.
            log "The WAL file ${MAX_BACKUP_WAL} has been successully restored, shutting down instance"
            pg_ctl -D "${PGDATA}" promote
            pg_ctl -D "${PGDATA}" stop -m fast
            log "Handing over control to Patroni ..."
        else
            log "Bootstrap from backup failed"
            exit 1
        fi
    else
        # Patroni attaches --scope and --datadir to the arguments, we need to strip them off as
        # initdb has no business with these parameters
        initdb_args=""
        for value in "$@"
        do
            case $value in
                "--scope"*)
                    ;;
                "--datadir"*)
                    ;;
                *)
                    initdb_args="${initdb_args} $value"
                    ;;
            esac
        done

        log "Invoking initdb"
        # shellcheck disable=SC2086
        initdb --auth-local=peer --auth-host=md5 --pgdata="${PGDATA}" --waldir="${WALDIR}" ${initdb_args}
    fi

    echo "include_if_exists = '/var/run/postgresql/timescaledb.conf'" >> "${PGDATA}/postgresql.conf"
kind: ConfigMap
metadata:
  labels:
    app: timescaledb
    cluster-name: timescaledb
    release: timescaledb
  name: timescaledb-scripts
  namespace: hypercloud5-system

---

apiVersion: v1
data:
  PATRONI_REPLICATION_PASSWORD: dG1heA== #bFFLdWR4SFJGSUZoZXprOEwwbjJzZ1ByZ2lRNFJBS0o=
  PATRONI_SUPERUSER_PASSWORD: dG1heA== #dVZZNmNkSnoyQjBqWWZ4TkFXOWVHeFFldXhVM29vWEE=
  PATRONI_admin_PASSWORD: dG1heA== #NGV6SlVYQlFkcWRwZkFsMk5JYldlUWhycTVJT2xqQlk=
kind: Secret
metadata:
  labels:
    app: timescaledb-timescaledb
    cluster-name: timescaledb
  name: timescaledb-credentials
  namespace: hypercloud5-system
type: Opaque

---

apiVersion: v1
kind: Service
metadata:
  labels:
    app: timescaledb
    cluster-name: timescaledb
    release: timescaledb
  name: timescaledb-service
  namespace: hypercloud5-system
spec:
  ports:
  - name: postgresql
    port: 5432
    protocol: TCP
    targetPort: postgresql
  selector:
    app: timescaledb
    cluster-name: timescaledb
    release: timescaledb
  sessionAffinity: None
  type: ClusterIP

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: timescaledb
    cluster-name: timescaledb
    release: timescaledb
  name: timescaledb
  namespace: hypercloud5-system
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: timescaledb
      cluster-name: timescaledb
      release: timescaledb
  serviceName: timescaledb-service
  template:
    metadata:
      labels:
        app: timescaledb
        cluster-name: timescaledb
        release: timescaledb
      name: timescaledb
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: timescaledb
                  cluster-name: timescaledb
                  release: timescaledb
              topologyKey: kubernetes.io/hostname
            weight: 100
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: timescaledb
                  cluster-name: timescaledb
                  release: timescaledb
              topologyKey: failure-domain.beta.kubernetes.io/zone
            weight: 50
      containers:
      - command:
        - /bin/bash
        - -c
        - |2

          install -o postgres -g postgres -d -m 0700 "/var/lib/postgresql/data" "/var/lib/postgresql/wal/pg_wal" || exit 1
          TABLESPACES=""
          for tablespace in ; do
            install -o postgres -g postgres -d -m 0700 "/var/lib/postgresql/tablespaces/${tablespace}/data"
          done

          # Environment variables can be read by regular users of PostgreSQL. Especially in a Kubernetes
          # context it is likely that some secrets are part of those variables.
          # To ensure we expose as little as possible to the underlying PostgreSQL instance, we have a list
          # of allowed environment variable patterns to retain.
          #
          # We need the KUBERNETES_ environment variables for the native Kubernetes support of Patroni to work.
          #
          # NB: Patroni will remove all PATRONI_.* environment variables before starting PostgreSQL

          # We store the current environment, as initscripts, callbacks, archive_commands etc. may require
          # to have the environment available to them
          set -o posix
          export -p > "${HOME}/.pod_environment"
          export -p | grep PGBACKREST > "${HOME}/.pgbackrest_environment"

          for UNKNOWNVAR in $(env | awk -F '=' '!/^(PATRONI_.*|HOME|PGDATA|PGHOST|LC_.*|LANG|PATH|KUBERNETES_SERVICE_.*)=/ {print $1}')
          do
              unset "${UNKNOWNVAR}"
          done

          touch /var/run/postgresql/timescaledb.conf
          touch /var/run/postgresql/wal_status

          echo "*:*:*:postgres:${PATRONI_SUPERUSER_PASSWORD}" >> ${HOME}/.pgpass
          chmod 0600 ${HOME}/.pgpass

          export PATRONI_POSTGRESQL_PGPASS="${HOME}/.pgpass.patroni"

          exec patroni /etc/timescaledb/patroni.yaml
        env:
        - name: TZ
          value: Asia/Seoul
        - name: PATRONI_admin_OPTIONS
          value: createrole,createdb
        - name: PATRONI_REPLICATION_USERNAME
          value: standby
        - name: PATRONI_KUBERNETES_POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: PATRONI_POSTGRESQL_CONNECT_ADDRESS
          value: $(PATRONI_KUBERNETES_POD_IP):5432
        - name: PATRONI_RESTAPI_CONNECT_ADDRESS
          value: $(PATRONI_KUBERNETES_POD_IP):8008
        - name: PATRONI_KUBERNETES_PORTS
          value: '[{"name": "postgresql", "port": 5432}]'
        - name: PATRONI_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: PATRONI_POSTGRESQL_DATA_DIR
          value: /var/lib/postgresql/data
        - name: PATRONI_KUBERNETES_NAMESPACE
          value: hypercloud5-system
        - name: PATRONI_KUBERNETES_LABELS
          value: '{app: timescaledb, cluster-name: timescaledb, release: timescaledb}'
        - name: PATRONI_SCOPE
          value: timescaledb
        - name: PGBACKREST_CONFIG
          value: /etc/pgbackrest/pgbackrest.conf
        - name: PGDATA
          value: $(PATRONI_POSTGRESQL_DATA_DIR)
        - name: PGHOST
          value: /var/run/postgresql
        - name: BOOTSTRAP_FROM_BACKUP
          value: "0"
        envFrom:
        - secretRef:
            name: timescaledb-credentials
        - secretRef:
            name: timescaledb-pgbackrest
            optional: true
        image: tmaxcloudck/timescaledb-cron:b5.0.0.0
        imagePullPolicy: Always
        lifecycle:
          preStop:
            exec:
              command:
              - psql
              - -X
              - --file
              - /etc/timescaledb/scripts/lifecycle_preStop.psql
        name: timescaledb
        ports:
        - containerPort: 8008
          name: patroni
          protocol: TCP
        - containerPort: 5432
          name: postgresql
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -h
            - /var/run/postgresql
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits:
            cpu: 300m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: false
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/lib/postgresql
          name: storage-volume
        - mountPath: /var/lib/postgresql/wal
          name: wal-volume
        - mountPath: /etc/timescaledb/patroni.yaml
          name: patroni-config
          readOnly: true
          subPath: patroni.yaml
        - mountPath: /etc/timescaledb/scripts
          name: timescaledb-scripts
          readOnly: true
        - mountPath: /etc/timescaledb/post_init.d
          name: post-init
          readOnly: true
        - mountPath: /etc/certificate
          name: certificate
          readOnly: true
        - mountPath: /var/run/postgresql
          name: socket-directory
        - mountPath: /etc/pgbackrest
          name: pgbackrest
          readOnly: true
        - mountPath: /etc/pgbackrest/bootstrap
          name: pgbackrest-bootstrap
          readOnly: true
      dnsPolicy: ClusterFirst
      initContainers:
      - command:
        - sh
        - -c
        - |
          set -e
          [ $CPUS -eq 0 ]   && CPUS="${RESOURCES_CPU_LIMIT}"
          [ $MEMORY -eq 0 ] && MEMORY="${RESOURCES_MEMORY_LIMIT}"

          if [ -f "${PGDATA}/postgresql.base.conf" ] && ! grep "${INCLUDE_DIRECTIVE}" postgresql.base.conf -qxF; then
            echo "${INCLUDE_DIRECTIVE}" >> "${PGDATA}/postgresql.base.conf"
          fi

          touch "${TSTUNE_FILE}"
          timescaledb-tune -quiet -pg-version 11 -conf-path "${TSTUNE_FILE}" -cpus "${CPUS}" -memory "${MEMORY}MB" \
             -yes

          # If there is a dedicated WAL Volume, we want to set max_wal_size to 60% of that volume
          # If there isn't a dedicated WAL Volume, we set it to 20% of the data volume
          if [ "${RESOURCES_WAL_VOLUME}" = "0" ]; then
            WALMAX="${RESOURCES_DATA_VOLUME}"
            WALPERCENT=20
          else
            WALMAX="${RESOURCES_WAL_VOLUME}"
            WALPERCENT=60
          fi

          WALMAX=$(numfmt --from=auto ${WALMAX})

          # Wal segments are 16MB in size, in this way we get a "nice" number of the nearest
          # 16MB
          WALMAX=$(( $WALMAX / 100 * $WALPERCENT / 16777216 * 16 ))
          WALMIN=$(( $WALMAX / 2 ))

          echo "max_wal_size=${WALMAX}MB" >> "${TSTUNE_FILE}"
          echo "min_wal_size=${WALMIN}MB" >> "${TSTUNE_FILE}"
        env:
        - name: TZ
          value: Asia/Seoul
        - name: TSTUNE_FILE
          value: /var/run/postgresql/timescaledb.conf
        - name: RESOURCES_WAL_VOLUME
          value: 30Gi
        - name: RESOURCES_DATA_VOLUME
          value: 10Gi
        - name: INCLUDE_DIRECTIVE
          value: include_if_exists = '/var/run/postgresql/timescaledb.conf'
        - name: CPUS
          valueFrom:
            resourceFieldRef:
              containerName: timescaledb
              divisor: "1"
              resource: requests.cpu
        - name: MEMORY
          valueFrom:
            resourceFieldRef:
              containerName: timescaledb
              divisor: 1Mi
              resource: requests.memory
        - name: RESOURCES_CPU_LIMIT
          valueFrom:
            resourceFieldRef:
              containerName: timescaledb
              divisor: "1"
              resource: limits.cpu
        - name: RESOURCES_MEMORY_LIMIT
          valueFrom:
            resourceFieldRef:
              containerName: timescaledb
              divisor: 1Mi
              resource: limits.memory
        image: tmaxcloudck/timescaledb-cron:{HPCD_TIMESCALEDB_VERSION}
        imagePullPolicy: IfNotPresent
        name: tstune
        resources:
          limits:
            cpu: 300m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: false
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/run/postgresql
          name: socket-directory
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      serviceAccount: hypercloud5-admin
      serviceAccountName: hypercloud5-admin
      terminationGracePeriodSeconds: 600
      volumes:
      - emptyDir: {}
        name: socket-directory
      - configMap:
          defaultMode: 420
          name: timescaledb-patroni
        name: patroni-config
      - configMap:
          defaultMode: 488
          name: timescaledb-scripts
        name: timescaledb-scripts
      - name: post-init
        projected:
          defaultMode: 488
          sources:
          - configMap:
              name: custom-init-scripts
              optional: true
          - secret:
              name: custom-secret-scripts
              optional: true
      - configMap:
          defaultMode: 416
          name: timescaledb-pgbouncer
          optional: true
        name: pgbouncer
      - configMap:
          defaultMode: 416
          name: timescaledb-pgbackrest
          optional: true
        name: pgbackrest
      - name: certificate
        secret:
          defaultMode: 416
          optional: true
          secretName: timescaledb-certificate
      - name: pgbackrest-bootstrap
        secret:
          defaultMode: 420
          optional: true
          secretName: pgbackrest-bootstrap
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        app: timescaledb
        cluster-name: timescaledb
        purpose: data-directory
        release: timescaledb
      name: storage-volume
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
      volumeMode: Filesystem
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        app: timescaledb
        cluster-name: timescaledb
        purpose: wal-directory
        release: timescaledb
      name: wal-volume
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 30Gi
      volumeMode: Filesystem
