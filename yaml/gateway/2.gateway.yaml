# Source: gateway/charts/traefik/templates/rbac/serviceaccount.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: traefik
  namespace: api-gateway-system
  annotations:
secrets:
  - name: traefik
automountServiceAccountToken: false
---
# Source: gateway/charts/traefik/templates/rbac/serviceaccount.yaml
apiVersion: v1
kind: Secret
metadata:
  name: traefik
  namespace: api-gateway-system
  annotations:
    kubernetes.io/service-account.name: traefik
type: kubernetes.io/service-account-token
---
# Source: gateway/templates/traefik-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gateway-config
  namespace: api-gateway-system
data:
  traefik.yml: |
    http:
      serversTransports:
        insecure:
          insecureSkipVerify: true
        tmaxcloud:
          serverName: tmax-cloud
        kubernetes:
          rootCAs:
            - /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      middlewares:
        cors-header:
          headers:
            accessControlAllowMethods:
              - "*"
            accessControlAllowHeaders:
              - "*"
            # accessControlAllowOriginList:
            #   - "https://console."
            accessControlAllowOriginListRegex:
              - "([a-z]+)\\.\\."
            accessControlMaxAge: 100
            addVaryHeader: true
        hypercloud-stripprefix:
          stripPrefix:
            prefixes:
              - "/api/hypercloud"
              - "/api/multi-hypercloud"
              - "/api/webhook"
        kubernetes-stripprefix:
          stripPrefix:
            prefixes:
              - "/api/kubernetes"
            forceSlash: true
        monitoring-stripprefix:
          stripPrefix:
            prefixes:
              - "/api/prometheus"
              - "/api/alertmanager"
        monitoring-stripprefix-tenancy:
          stripPrefix:
            prefixes:
              - "/api/prometheus-tenancy"
---
# Source: gateway/charts/traefik/templates/rbac/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: traefik
rules:
  - apiGroups:
      - ""
    resources:
      - services
      - endpoints
      - secrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
      - networking.k8s.io
    resources:
      - ingresses
      - ingressclasses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
      - networking.k8s.io
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - traefik.containo.us
    resources:
      - ingressroutes
      - ingressroutetcps
      - ingressrouteudps
      - middlewares
      - middlewaretcps
      - tlsoptions
      - tlsstores
      - traefikservices
      - serverstransports
    verbs:
      - get
      - list
      - watch
---
# Source: gateway/charts/traefik/templates/rbac/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: traefik
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: traefik
subjects:
  - kind: ServiceAccount
    name: traefik
    namespace: api-gateway-system
---
# Source: gateway/charts/traefik/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: traefik
  namespace: api-gateway-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: traefik
      app.kubernetes.io/instance: gateway
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  minReadySeconds: 0
  template: 
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "9100"
      labels:
        app.kubernetes.io/name: traefik
        helm.sh/chart: traefik-10.24.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/instance: gateway
        app: traefik
    spec:
      automountServiceAccountToken: false
      serviceAccountName: traefik
      terminationGracePeriodSeconds: 60
      hostNetwork: false
      containers:
      - image: "traefik:v2.8.0"
        imagePullPolicy: IfNotPresent
        name: traefik
        resources:
        readinessProbe:
          httpGet:
            path: /ping
            port: 9000
          failureThreshold: 1
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 2
        livenessProbe:
          httpGet:
            path: /ping
            port: 9000
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 2
        ports:
        - name: "k8s"
          containerPort: 6443
          protocol: "TCP"
        - name: "metrics"
          containerPort: 9100
          protocol: "TCP"
        - name: "traefik"
          containerPort: 9000
          protocol: "TCP"
        - name: "web"
          containerPort: 8000
          protocol: "TCP"
        - name: "websecure"
          containerPort: 8443
          protocol: "TCP"
        securityContext:
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 65532
          runAsNonRoot: true
          runAsUser: 65532
        volumeMounts:
          - name: sa-token
            mountPath: /var/run/secrets/kubernetes.io/serviceaccount
          - name: data
            mountPath: /data
          - name: tmp
            mountPath: /tmp
          - name: gateway-config
            mountPath: /gateway-config
            readOnly: true
        args:
          - "--entrypoints.k8s.address=:6443/tcp"
          - "--entrypoints.metrics.address=:9100/tcp"
          - "--entrypoints.traefik.address=:9000/tcp"
          - "--entrypoints.web.address=:8000/tcp"
          - "--entrypoints.websecure.address=:8443/tcp"
          - "--api.dashboard=true"
          - "--ping=true"
          - "--metrics.prometheus=true"
          - "--metrics.prometheus.entrypoint=metrics"
          - "--providers.kubernetescrd"
          - "--providers.kubernetescrd.allowCrossNamespace=true"
          - "--providers.kubernetescrd.allowExternalNameServices=true"
          - "--providers.kubernetescrd.allowEmptyServices=true"
          - "--providers.kubernetesingress"
          - "--providers.kubernetesingress.allowExternalNameServices=true"
          - "--providers.kubernetesingress.allowEmptyServices=true"
          - "--providers.kubernetesingress.ingressendpoint.publishedservice=api-gateway-system/traefik"
          - "--providers.kubernetesingress.ingressClass=tmax-cloud"
          - "--entrypoints.web.http.redirections.entryPoint.to=:443"
          - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
          - "--entrypoints.websecure.http.tls=true"
          - "--log.format=json"
          - "--accesslog=true"
          - "--accesslog.fields.defaultmode=keep"
          - "--accesslog.fields.headers.defaultmode=drop"
          - "--serverstransport.rootcas=/var/run/secrets/tmaxcloud/ca.crt, /var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
          - "--entrypoints.websecure.http.middlewares=cors-header@file"
          - "--providers.file"
          - "--providers.file.directory=/gateway-config"
          - "--providers.file.watch=true"
        env:
          - name: TZ
            value: Asia/Seoul
      volumes:
        - name: sa-token
          secret:
            secretName: traefik
        - name: data
          emptyDir: {}
        - name: tmp
          emptyDir: {}
        - name: gateway-config
          configMap:
            name: gateway-config
      tolerations:
        - key: node-role.kubernetes.io/master
          operator: Exists
      securityContext:
        fsGroup: 65532
---
# Source: gateway/charts/traefik/templates/ingressclass.yaml
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  annotations:
    ingressclass.kubernetes.io/is-default-class: "true"
  name: tmax-cloud
spec:
  controller: traefik.io/ingress-controller
---
# Source: gateway/charts/traefik/templates/service.yaml
apiVersion: v1
kind: List
metadata:
  name: traefik
  namespace: api-gateway-system
items:
  - apiVersion: v1
    kind: Service
    metadata:
      name: traefik
      namespace: api-gateway-system
      labels:
        app.kubernetes.io/name: traefik
        helm.sh/chart: traefik-10.24.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/instance: gateway
      annotations:
        service.beta.kubernetes.io/aws-load-balancer-internal: "true"
        service.beta.kubernetes.io/aws-load-balancer-type: nlb
    spec:
      type: NodePort
      selector:
        app.kubernetes.io/name: traefik
        app.kubernetes.io/instance: gateway
      ports:
      - port: 6443
        name: k8s
        targetPort: "k8s"
        protocol: TCP
      - port: 9100
        name: metrics
        targetPort: "metrics"
        protocol: TCP
      - port: 9000
        name: traefik
        targetPort: "traefik"
        protocol: TCP
        nodePort: 30900
      - port: 80
        name: web
        targetPort: "web"
        protocol: TCP
        nodePort: 31080
      - port: 443
        name: websecure
        targetPort: "websecure"
        protocol: TCP
        nodePort: 31443
